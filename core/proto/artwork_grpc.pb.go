// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: artwork.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtworkService_GetArtworkInfo_FullMethodName = "/artwork.ArtworkService/GetArtworkInfo"
	ArtworkService_GetPictureData_FullMethodName = "/artwork.ArtworkService/GetPictureData"
)

// ArtworkServiceClient is the client API for ArtworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtworkServiceClient interface {
	GetArtworkInfo(ctx context.Context, in *GetArtworkRequest, opts ...grpc.CallOption) (*GetArtworkResponse, error)
	GetPictureData(ctx context.Context, in *GetPictureDataRequest, opts ...grpc.CallOption) (ArtworkService_GetPictureDataClient, error)
}

type artworkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtworkServiceClient(cc grpc.ClientConnInterface) ArtworkServiceClient {
	return &artworkServiceClient{cc}
}

func (c *artworkServiceClient) GetArtworkInfo(ctx context.Context, in *GetArtworkRequest, opts ...grpc.CallOption) (*GetArtworkResponse, error) {
	out := new(GetArtworkResponse)
	err := c.cc.Invoke(ctx, ArtworkService_GetArtworkInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artworkServiceClient) GetPictureData(ctx context.Context, in *GetPictureDataRequest, opts ...grpc.CallOption) (ArtworkService_GetPictureDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArtworkService_ServiceDesc.Streams[0], ArtworkService_GetPictureData_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &artworkServiceGetPictureDataClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArtworkService_GetPictureDataClient interface {
	Recv() (*GetPictureDataResponse, error)
	grpc.ClientStream
}

type artworkServiceGetPictureDataClient struct {
	grpc.ClientStream
}

func (x *artworkServiceGetPictureDataClient) Recv() (*GetPictureDataResponse, error) {
	m := new(GetPictureDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ArtworkServiceServer is the server API for ArtworkService service.
// All implementations must embed UnimplementedArtworkServiceServer
// for forward compatibility
type ArtworkServiceServer interface {
	GetArtworkInfo(context.Context, *GetArtworkRequest) (*GetArtworkResponse, error)
	GetPictureData(*GetPictureDataRequest, ArtworkService_GetPictureDataServer) error
	mustEmbedUnimplementedArtworkServiceServer()
}

// UnimplementedArtworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtworkServiceServer struct {
}

func (UnimplementedArtworkServiceServer) GetArtworkInfo(context.Context, *GetArtworkRequest) (*GetArtworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArtworkInfo not implemented")
}
func (UnimplementedArtworkServiceServer) GetPictureData(*GetPictureDataRequest, ArtworkService_GetPictureDataServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPictureData not implemented")
}
func (UnimplementedArtworkServiceServer) mustEmbedUnimplementedArtworkServiceServer() {}

// UnsafeArtworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtworkServiceServer will
// result in compilation errors.
type UnsafeArtworkServiceServer interface {
	mustEmbedUnimplementedArtworkServiceServer()
}

func RegisterArtworkServiceServer(s grpc.ServiceRegistrar, srv ArtworkServiceServer) {
	s.RegisterService(&ArtworkService_ServiceDesc, srv)
}

func _ArtworkService_GetArtworkInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArtworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtworkServiceServer).GetArtworkInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtworkService_GetArtworkInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtworkServiceServer).GetArtworkInfo(ctx, req.(*GetArtworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtworkService_GetPictureData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPictureDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArtworkServiceServer).GetPictureData(m, &artworkServiceGetPictureDataServer{stream})
}

type ArtworkService_GetPictureDataServer interface {
	Send(*GetPictureDataResponse) error
	grpc.ServerStream
}

type artworkServiceGetPictureDataServer struct {
	grpc.ServerStream
}

func (x *artworkServiceGetPictureDataServer) Send(m *GetPictureDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ArtworkService_ServiceDesc is the grpc.ServiceDesc for ArtworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "artwork.ArtworkService",
	HandlerType: (*ArtworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetArtworkInfo",
			Handler:    _ArtworkService_GetArtworkInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPictureData",
			Handler:       _ArtworkService_GetPictureData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "artwork.proto",
}
